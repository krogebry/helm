{{- $env_name := .Values.infra.env_name }}
{{- $short_domain_name := include "short-domain-name" . }}
{{- $short_api_domain_name := include "short-api-domain-name" . }}
{{- $domain_name := include "domain-name" . }}
{{- $cluster_id := include "cluster-id" . }}

[[inputs.internal]]
  collect_memstats = true

[[outputs.prometheus_client]]
  listen = ":8125"
  path = "/metrics"
  metric_version = 2

[agent]
  interval = "60s"
  flush_interval = "60s"
  flush_jitter = "0s"

# Scrape the pg exporter
[[inputs.prometheus]]
urls = [ "http://localhost:9187/metrics" ]

# Ensure these services resolve to Istio Virtual Service endpoints
[[inputs.prometheus]]
urls = [ {{- range $ivs_name := .Values.services.virtual_service_endpoint_names }} "http://localhost:9115/probe?module={{ $ivs_name }}.{{ $domain_name }}&target=8.8.8.8", {{- end }} ]


# Ensure the shortnames on myapp.mydomain.com resolve
{{- range $short_name := .Values.services.short_names }}
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module={{ $short_name }}.{{ $short_domain_name }}&target=8.8.8.8"]

{{- end }}

# Ensure the shortnames on api.myapp.mydomain.com resolve
{{- range $short_name := .Values.services.api_short_names }}
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module={{ $short_name }}.{{ $short_api_domain_name }}&target=8.8.8.8"]

{{- end }}


# Ensure all Istio Virtual Service endpoints resolve as A records
{{- range $virtual_service_endpoint_name := .Values.services.virtual_service_endpoint_names }}
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module={{ $virtual_service_endpoint_name }}.{{ $domain_name }}&target=8.8.8.8"]

{{- end }}

# Ensure all Istio Virtual Services pass TLS checks
[[inputs.prometheus]]
urls = [{{- range $ivs_name := .Values.services.default_gateway_ivs }}
"http://localhost:9115/probe?module=tls_connect&target={{ $ivs_name }}-{{ $domain_name }}:443", {{- end }} ]

# Ensure TLS checks on custom gateways Istio Virtual Service's
[[inputs.prometheus]]
urls = [{{- range $ivs_name := .Values.services.custom_gateway_ivs }}
"http://localhost:9115/probe?module=tls_connect&target={{ $ivs_name }}.{{ $short_api_domain_name }}:443", {{- end }} ]

# Check Istio Virtual Service endpoints for oauth gates
{{- range $service_name := .Values.services.oauth_blocked }}
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module=https_oauth_blocked&target=https://{{ $service_name }}-myapp-{{ $env_name }}.{{ $cluster_id }}.aws.infra.shared_cluster.w3n.io"]

{{- end }}

# Test all gRPC endpoints
[[inputs.prometheus]]
urls = [ {{- range $service_name := .Values.services.grpc_services }}
"http://localhost:9115/probe?module=grpc&target={{ $service_name }}.{{ $env_name }}.api.myapp.mydomain.com:443",
{{- end }} ]

# Custom check to ensure that VCS grpc on :80 is open
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module=grpc_plain&target=vcs-grpc-myapp.{{ $env_name }}.api.myapp.mydomain.com:80" ]

# Visualizer https
[[inputs.prometheus]]
urls = [ "http://localhost:9115/probe?module=http_visualizer&target=https://visualizer.{{ .Values.infra.env_name }}.myapp.mydomain.com" ]
